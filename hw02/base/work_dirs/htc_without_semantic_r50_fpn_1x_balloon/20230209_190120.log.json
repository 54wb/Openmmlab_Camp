{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nGPU 1: Tesla V100-PCIE-32GB\nCUDA_HOME: /home/lwb/cuda\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0\nPyTorch: 1.10.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.2+cu111\nOpenCV: 4.6.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+fedcedf", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/balloon/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/instances_train.json',\n        img_prefix='data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/instances_val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.5),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/instances_val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip', flip_ratio=0.5),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=3)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmdetection/v2.0/htc/htc_r50_fpn_1x_coco/htc_r50_fpn_1x_coco_20200317-7332cf16.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=True,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=[\n            dict(\n                type='HTCMaskHead',\n                with_conv_res=False,\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=1,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),\n            dict(\n                type='HTCMaskHead',\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=1,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),\n            dict(\n                type='HTCMaskHead',\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=1,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nclasses = ('balloon', )\nwork_dir = './work_dirs/htc_without_semantic_r50_fpn_1x_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 770092285, "exp_name": "htc_without_semantic_r50_fpn_1x_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.005, "bbox_mAP": 0.7647, "bbox_mAP_50": 0.878, "bbox_mAP_75": 0.8579, "bbox_mAP_s": 0.1391, "bbox_mAP_m": 0.6736, "bbox_mAP_l": 0.8257, "bbox_mAP_copypaste": "0.7647 0.8780 0.8579 0.1391 0.6736 0.8257", "segm_mAP": 0.7848, "segm_mAP_50": 0.878, "segm_mAP_75": 0.861, "segm_mAP_s": 0.0348, "segm_mAP_m": 0.6933, "segm_mAP_l": 0.8604, "segm_mAP_copypaste": "0.7848 0.8780 0.8610 0.0348 0.6933 0.8604"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.005, "bbox_mAP": 0.77, "bbox_mAP_50": 0.8628, "bbox_mAP_75": 0.8363, "bbox_mAP_s": 0.1885, "bbox_mAP_m": 0.5987, "bbox_mAP_l": 0.853, "bbox_mAP_copypaste": "0.7700 0.8628 0.8363 0.1885 0.5987 0.8530", "segm_mAP": 0.7919, "segm_mAP_50": 0.8628, "segm_mAP_75": 0.8611, "segm_mAP_s": 0.0191, "segm_mAP_m": 0.5912, "segm_mAP_l": 0.8811, "segm_mAP_copypaste": "0.7919 0.8628 0.8611 0.0191 0.5912 0.8811"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.005, "bbox_mAP": 0.7732, "bbox_mAP_50": 0.8711, "bbox_mAP_75": 0.8498, "bbox_mAP_s": 0.3628, "bbox_mAP_m": 0.5871, "bbox_mAP_l": 0.8546, "bbox_mAP_copypaste": "0.7732 0.8711 0.8498 0.3628 0.5871 0.8546", "segm_mAP": 0.7979, "segm_mAP_50": 0.8711, "segm_mAP_75": 0.8695, "segm_mAP_s": 0.0194, "segm_mAP_m": 0.5799, "segm_mAP_l": 0.8893, "segm_mAP_copypaste": "0.7979 0.8711 0.8695 0.0194 0.5799 0.8893"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.005, "bbox_mAP": 0.7839, "bbox_mAP_50": 0.885, "bbox_mAP_75": 0.8628, "bbox_mAP_s": 0.3676, "bbox_mAP_m": 0.6219, "bbox_mAP_l": 0.8555, "bbox_mAP_copypaste": "0.7839 0.8850 0.8628 0.3676 0.6219 0.8555", "segm_mAP": 0.8049, "segm_mAP_50": 0.885, "segm_mAP_75": 0.8828, "segm_mAP_s": 0.047, "segm_mAP_m": 0.6141, "segm_mAP_l": 0.8899, "segm_mAP_copypaste": "0.8049 0.8850 0.8828 0.0470 0.6141 0.8899"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.005, "bbox_mAP": 0.796, "bbox_mAP_50": 0.8813, "bbox_mAP_75": 0.8633, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6288, "bbox_mAP_l": 0.8688, "bbox_mAP_copypaste": "0.7960 0.8813 0.8633 0.4040 0.6288 0.8688", "segm_mAP": 0.8054, "segm_mAP_50": 0.8813, "segm_mAP_75": 0.8813, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.6244, "segm_mAP_l": 0.8832, "segm_mAP_copypaste": "0.8054 0.8813 0.8813 0.0673 0.6244 0.8832"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.005, "bbox_mAP": 0.785, "bbox_mAP_50": 0.8834, "bbox_mAP_75": 0.8624, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.5938, "bbox_mAP_l": 0.8616, "bbox_mAP_copypaste": "0.7850 0.8834 0.8624 0.4040 0.5938 0.8616", "segm_mAP": 0.8053, "segm_mAP_50": 0.8834, "segm_mAP_75": 0.8834, "segm_mAP_s": 0.0661, "segm_mAP_m": 0.5894, "segm_mAP_l": 0.8881, "segm_mAP_copypaste": "0.8053 0.8834 0.8834 0.0661 0.5894 0.8881"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.005, "bbox_mAP": 0.7923, "bbox_mAP_50": 0.8777, "bbox_mAP_75": 0.8593, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6078, "bbox_mAP_l": 0.869, "bbox_mAP_copypaste": "0.7923 0.8777 0.8593 0.4040 0.6078 0.8690", "segm_mAP": 0.8036, "segm_mAP_50": 0.8777, "segm_mAP_75": 0.8777, "segm_mAP_s": 0.101, "segm_mAP_m": 0.5988, "segm_mAP_l": 0.8876, "segm_mAP_copypaste": "0.8036 0.8777 0.8777 0.1010 0.5988 0.8876"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.005, "bbox_mAP": 0.7803, "bbox_mAP_50": 0.8785, "bbox_mAP_75": 0.8598, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.5875, "bbox_mAP_l": 0.8583, "bbox_mAP_copypaste": "0.7803 0.8785 0.8598 0.3535 0.5875 0.8583", "segm_mAP": 0.7925, "segm_mAP_50": 0.8785, "segm_mAP_75": 0.8785, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.5636, "segm_mAP_l": 0.8805, "segm_mAP_copypaste": "0.7925 0.8785 0.8785 0.0808 0.5636 0.8805"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.0005, "bbox_mAP": 0.7816, "bbox_mAP_50": 0.8801, "bbox_mAP_75": 0.8613, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.5907, "bbox_mAP_l": 0.861, "bbox_mAP_copypaste": "0.7816 0.8801 0.8613 0.3535 0.5907 0.8610", "segm_mAP": 0.7987, "segm_mAP_50": 0.8801, "segm_mAP_75": 0.8801, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.5807, "segm_mAP_l": 0.8874, "segm_mAP_copypaste": "0.7987 0.8801 0.8801 0.0808 0.5807 0.8874"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.0005, "bbox_mAP": 0.7799, "bbox_mAP_50": 0.8767, "bbox_mAP_75": 0.8572, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.5895, "bbox_mAP_l": 0.8592, "bbox_mAP_copypaste": "0.7799 0.8767 0.8572 0.3535 0.5895 0.8592", "segm_mAP": 0.796, "segm_mAP_50": 0.8767, "segm_mAP_75": 0.8767, "segm_mAP_s": 0.101, "segm_mAP_m": 0.5675, "segm_mAP_l": 0.8843, "segm_mAP_copypaste": "0.7960 0.8767 0.8767 0.1010 0.5675 0.8843"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.0005, "bbox_mAP": 0.7835, "bbox_mAP_50": 0.8768, "bbox_mAP_75": 0.8571, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.5873, "bbox_mAP_l": 0.8643, "bbox_mAP_copypaste": "0.7835 0.8768 0.8571 0.3535 0.5873 0.8643", "segm_mAP": 0.796, "segm_mAP_50": 0.8768, "segm_mAP_75": 0.8768, "segm_mAP_s": 0.101, "segm_mAP_m": 0.5694, "segm_mAP_l": 0.8843, "segm_mAP_copypaste": "0.7960 0.8768 0.8768 0.1010 0.5694 0.8843"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 5e-05, "bbox_mAP": 0.7835, "bbox_mAP_50": 0.8769, "bbox_mAP_75": 0.8572, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.5873, "bbox_mAP_l": 0.8637, "bbox_mAP_copypaste": "0.7835 0.8769 0.8572 0.3535 0.5873 0.8637", "segm_mAP": 0.7962, "segm_mAP_50": 0.8769, "segm_mAP_75": 0.8769, "segm_mAP_s": 0.101, "segm_mAP_m": 0.5694, "segm_mAP_l": 0.8838, "segm_mAP_copypaste": "0.7962 0.8769 0.8769 0.1010 0.5694 0.8838"}
